---
prev: coll2.textile
next: concurrency.textile
title: 使用specs进行测试
layout: post
---

This lesson covers testing with Specs, a Behavior-Driven Design (BDD) Framework for Scala.
本节课将介绍使用specs，一个Scala行为驱动设计（BDD）框架来进行测试。

* "extends Specification":#example
** nested examples
* "Execution Model":#scope
* "Setup and TearDown":#setup
** doFirst
** doBefore
** doAfter
* "Matchers":#matchers
** mustEqual
** contains
** sameSize?
** Write your own
* "Mocks":#mocks
* "Spies":#spies
* "run in sbt":#sbt


h2(#example). extends Specification 扩展规格

Let's just jump in.让我们直接开始。

<pre>
import org.specs._

object ArithmeticSpec extends Specification {
  "Arithmetic" should {
    "add two numbers" in {
      1 + 1 mustEqual 2
    }
    "add three numbers" in {
      1 + 1 + 1 mustEqual 3
    }
  }
}
</pre>

*Arithmetic* is the *System Under Specification*
*算术*是一个*规范约束下的系统*

*add* 是上下文。
*add加* is a context.

*add two numbers* and *add three numbers* are examples.
*两个数相加*，和*三个数字相加*是例子。

@mustEqual@ 表示*预期*
@mustEqual@ indicates an *expectation*

@1 mustEqual 1@ is a common placeholder *expectation* before you start writing real tests.  All examples should have at least one expectation.
@1 mustEqual 1@是一种常见的占位符*预期*，然后再开始编写实际的测试。所有的例子都应该至少有一个预期。


h3. Duplication 复制

Notice how two tests both have @add@ in their name?  We can get rid of that by *nesting* expectations.
请注意两个测试都是怎样将@add@ 加在他们的名字中的吗？我们可以通过*嵌套*预期摆脱那种重复。

<pre>
import org.specs._

object ArithmeticSpec extends Specification {
  "Arithmetic" should {
    "add" in {
      "two numbers" in {
        1 + 1 mustEqual 2
      }
      "three numbers" in {
        1 + 1 + 1 mustEqual 3
      }
    }
  }
}
</pre>

h2(#scope). Execution Model 执行模型

<pre>
object ExecSpec extends Specification {
  "Mutations are isolated" should {
    var x = 0
    "x equals 1 if we set it." in {
      x = 1
      x mustEqual 1
    }
    "x is the default value if we don't change it" in {
      x mustEqual 0
    }
  }
}
</pre>

h2(#setup). Setup, Teardown

h3. doBefore & doAfter

<pre>
"my system" should {
  doBefore { resetTheSystem() /** user-defined reset function */ }
  "mess up the system" in {...}
  "and again" in {...}
  doAfter { cleanThingsUp() }
}
</pre>

*NOTE* @doBefore@/@doAfter@ are only run on leaf examples.
*注意* @doBefore@/@doAfter@ 只能运行在叶例子上。

h3. doFirst & doLast

@doFirst@/@doLast@ is for single-time setup. (need example, I don't use this)
@doFirst@/@doLast@ 用来做一次性的设置。（需要例子，我不使用这个）

<pre>
"Foo" should {
  doFirst { openTheCurtains() }
  "test stateless methods" in {...}
  "test other stateless methods" in {...}
  doLast { closeTheCurtains() }
}
</pre>

h2(#matchers). Matchers

You have data, you want to make sure it's right. Let's tour the most commonly used matchers. (See Also "Matchers Guide":http://code.google.com/p/specs/wiki/MatchersGuide)
你有数据，你要确保它是正确的。让我们浏览一下最常用的匹配器。 （另见“匹配器指南”：http://code.google.com/p/specs/wiki/MatchersGuide）

h3. mustEqual

We've seen several examples of mustEqual already.
我们已经看到几个mustEqual的例子了。

<pre>
1 mustEqual 1

"a" mustEqual "a"
</pre>

Reference equality, value equality.
引用相等，值相等。

h3. elements in a Sequence序列中的元素

<pre>
val numbers = List(1, 2, 3)

numbers must contain(1)
numbers must not contain(4)

numbers must containAll(List(1, 2, 3))
numbers must containInOrder(List(1, 2, 3))

List(1, List(2, 3, List(4)), 5) must haveTheSameElementsAs(List(5, List(List(4), 2, 3), 1))
</pre>


h3. Items in a Map映射中的元素

<pre>
map must haveKey(k)
map must notHaveKey(k)

map must haveValue(v)
map must notHaveValue(v)
</pre>

h3. Numbers数字

<pre>
a must beGreaterThan(b)
a must beGreaterThanOrEqualTo(b)

a must beLessThan(b)
a must beLessThanOrEqualTo(b)

a must beCloseTo(b, delta)
</pre>


h3. Options

<pre>
a must beNone

a must beSome[Type]

a must beSomething

a must beSome(value)
</pre>

h3. throwA

<pre>
a must throwA[WhateverException]
</pre>

This is shorter than a try catch with a fail in the body.
这是一个try\catch块中有失败的简写。

您也可以期望一个特定的消息
You can also expect a specific message

<pre>
a must throwA(WhateverException("message"))
</pre>

You can also match on the exception:
您也可以匹配异常：

<pre>
a must throwA(new Exception) like {
  case Exception(m) => m.startsWith("bad")
}
</pre>


h3. Write your own Matchers 写你自己的匹配器

<pre>
import org.specs.matcher.Matcher
</pre>

h4. As a val

<pre>
"A matcher" should {
  "be created as a val" in {
    val beEven = new Matcher[Int] {
      def apply(n: => Int) = {
        (n % 2 == 0, "%d is even".format(n), "%d is odd".format(n))
      }
    }
    2 must beEven
  }
}
</pre>

The contract is to return a tuple containing whether the expectation is true, and a message for when it is and isn't true.
TODO
契约是返回一个元组并查看包含的期望是否为真，并根据结果返回不同的消息。

h4. As a case class

<pre>
case class beEven(b: Int) extends Matcher[Int]() {
  def apply(n: => Int) =  (n % 2 == 0, "%d is even".format(n), "%d is odd".format(n))
}
</pre>

Using a case class makes it more shareable.
使用样本类增加了代码的重用性。

h2(#mocks). Mocks

<pre>
import org.specs.Specification
import org.specs.mock.Mockito

class Foo[T] {
  def get(i: Int): T
}

object MockExampleSpec extends Specification with Mockito {
  val m = mock[Foo[String]]

  m.get(0) returns "one"

  m.get(0)

  there was one(m).get(0)

  there was no(m).get(1)
}
</pre>

*See Also* "Using Mockito":http://code.google.com/p/specs/wiki/UsingMockito

h2(#spies). Spies

Spies can also be used in order to do some "partial mocking" of real objects:
间谍可以对真正的对象做一些“局部mocking”：

<pre>
val list = new LinkedList[String]
val spiedList = spy(list)

// methods can be stubbed on a spy
spiedList.size returns 100

// other methods can also be used
spiedList.add("one")
spiedList.add("two")

// and verification can happen on a spy
there was one(spiedList).add("one")
</pre>

However, working with spies can be tricky:
然而，使用间谍可能会出现非常微妙的情况：

<pre>
// if the list is empty, this will throws an IndexOutOfBoundsException
spiedList.get(0) returns "one"
</pre>

@doReturn@ must be used in that case:
这时必须使用@doReturn@：

<pre>
doReturn("one").when(spiedList).get(0)
</pre>


h2(#sbt). Run individual specs in sbt 在sbt中运行单个specs


<pre>
> test-only com.twitter.yourservice.UserSpec
</pre>

Will run just that spec.
将只运行那个规范。

<pre>
> ~ test-only com.twitter.yourservice.UserSpec
</pre>

Will run that test in a loop, with each file modification triggering a test run.
将在一个循环中运行该测试，文件的每一次修改都将引发测试运行。