---
prev: type-basics.textile
next: sbt.textile
title: 高级类型
layout: post
---

课程内容：

* "View bounds":#viewbounds ("type classes")
* "Other Type Bounds":#otherbounds
* "Higher kinded types & ad-hoc polymorphism":#higher
* "F-bounded polymorphism / recursive types":#fbounded
* "Structural types":#structural
* "Abstract types members":#abstractmem
* "Type erasures & manifests":#manifest
* "Case study: Finagle":#finagle

h2(#viewbounds). View bounds ("type classes") 视界（“类型类”）

Sometimes you don't need to specify that one type is equal/sub/super another, just that you could fake it with conversions. A view bound specifies a type that can be "viewed as" another. This makes sense for an operation that needs to "read" an object but doesn't modify the object.
有时候，你并不需要指定一类是等于/子/超于另一个类，只是你可以通过转换修改它。一个视界指定可以“看作是”另一个类的类型。这对对象的只读操作是很有用的。

*隐*函数允许自动转换。更确切地说，它们在可以帮助满足类型推断允许按需功能应用。例如：
*Implicit* functions allow automatic conversion. More precisely, they allow on-demand function application when this can help satisfy type inference. e.g.:


<pre>
scala> implicit def strToInt(x: String) = x.toInt
strToInt: (x: String)Int

scala> "123"
res0: java.lang.String = 123

scala> val y: Int = "123"
y: Int = 123

scala> math.max("123", 111)
res1: Int = 123
</pre>

view bounds, like type bounds demand such a function exists for the given type.  You specify a type bound with <code><%</code> e.g.,
视界，就像类型边界要求对于给定的类型存在这样一个函数。您可以使用<code><%</code>指定类型限制，例如：

<pre>
scala> class Container[A <% Int] { def addIt(x: A) = 123 + x }
defined class Container
</pre>

This says that *A* has to be "viewable" as *Int*.  Let's try it.
这是说*A*必须对*Int*是“可视”的。让我们试试吧。

<pre>
scala> (new Container[String]).addIt("123")
res11: Int = 246

scala> (new Container[Int]).addIt(123) 
res12: Int = 246

scala> (new Container[Float]).addIt(123.2F)
<console>:8: error: could not find implicit value for evidence parameter of type (Float) => Int
       (new Container[Float]).addIt(123.2)
        ^
</pre>

h2(#otherbounds). Other type bounds 其他类型限制

Methods can enforce more complex type bounds via implicit parameters. For example, <code>List</code> supports <code>sum</code> on numeric contents but not on others. Alas, Scala's numeric types don't all share a superclass, so we can't just say <code>T <: Number</code>. Instead, to make this work, Scala's math library <a href="http://www.azavea.com/blogs/labs/2011/06/scalas-numeric-type-class-pt-1/">defines an implicit <code>Numeric[T]</code> for the appropriate types T</a>.  Then in <code>List</code>'s definition uses it:


方法可以通过隐含参数执行更复杂的类型限制。例如中，<code>List</code>支持对数字内容执行<code>sum</code>，但对其他内容却不行。呃，Scala的数字类型并不都共享一个超类，所以我们不能使用<code>T <: Number</code>。相反，要使之能工作，Scala的math库<a href="http://www.azavea.com/blogs/labs/2011/06/scalas-numeric-type-class-pt-1/">对适当的类型T 定义了一个隐含的的<code>Numeric[T]</code></a>。 然后在<code>List</code>定义中使用它：

<pre>
sum[B >: A](implicit num: Numeric[B]): B
</pre>

If you invoke <code>List(1,2).sum()</code>, you don't need to pass a _num_ parameter; it's set implicitly. But if you invoke <code>List("whoop").sum()</code>, it complains that it couldn't set <code>num</code>.
如果你调用<code>List(1,2).sum()</code>，你并不需要传入一个_num_ 参数；它是隐式设置的。但如果你调用<code>List("whoop").sum()</code>，它会抱怨无法设置<code>num</code>。

方法可能会要求某种特定类型的“证据”不，在没有设定陌生的对象为<code>Numeric</code>的时候TODO。相反，你可以使用这些类型的关系运算符：
Methods may ask for some kinds of specific "evidence" for a type without setting up strange objects as with <code>Numeric</code>. Instead, you can use of these type-relation operators:

|A =:= B|A must be equal to B|
|A <:< B|A must be a subtype of B|
|A <%< B|A must be viewable as B|
|A =:= B|A 必须和 B相等|
|A <:< B|A 必须是 B的子类|
|A <%< B|A 必须对 B可见|

<pre>
scala> class Container[A](value: A) { def addIt(implicit evidence: A =:= Int) = 123 + value }
defined class Container

scala> (new Container(123)).addIt
res11: Int = 246

scala> (new Container("123")).addIt
<console>:10: error: could not find implicit value for parameter evidence: =:=[java.lang.String,Int]
</pre>

Similarly, given our previous implicit, we can relax the constraint to viewability:
同样，根据之前的隐式转换，我们可以放松可视性约束：

<pre>
scala> class Container[A](value: A) { def addIt(implicit evidence: A <%< Int) = 123 + value }
defined class Container

scala> (new Container("123")).addIt
res15: Int = 246
</pre>

h3. Generic programming with views 使用视图进行泛型编程

在Scala标准库，视图主要是用在实现集合的通用函数。例如“min”函数（在*Seq[]*上）就使用了这种技术：
In the Scala standard library, views are primarily used to implement generic functions over collections.  For example, the "min" function (on *Seq[]*), uses this technique:

<pre>
def min[B >: A](implicit cmp: Ordering[B]): A = {
  if (isEmpty)
    throw new UnsupportedOperationException("empty.min")

  reduceLeft((x, y) => if (cmp.lteq(x, y)) x else y)
}
</pre>

The main advantages of this are:

* Items in the collections aren't required to implement *Ordered*, but *Ordered* uses are still statically type checked.
* You can define your own orderings without any additional library support:
其主要优点是：

* 集合中的元素并不是必须实现 *Ordered*特质，但 *Ordered*仍然可以执行静态类型检查。
* 无需任何额外的库支持，你也可以定义自己的排序：

<pre>
scala> List(1,2,3,4).min
res0: Int = 1

scala> List(1,2,3,4).min(new Ordering[Int] { def compare(a: Int, b: Int) = b compare a })
res3: Int = 4
</pre>

As a sidenote, there are views in the standard library that translates *Ordered* into *Ordering* (and vice versa).
作为旁注，标准库中有视图来将 *Ordered* 转换为 *Ordering* （反之亦然）。

<pre>
trait LowPriorityOrderingImplicits {
  implicit def ordered[A <: Ordered[A]]: Ordering[A] = new Ordering[A] {
    def compare(x: A, y: A) = x.compare(y)
  }
}
</pre>

h4. Context bounds & implicitly[] 隐式上下文边界[]

Scala2.8引入线程thrugh和访问隐含参数的简写TODO。
Scala 2.8 introduced a shorthand for threading through & accessing implicit arguments.

<pre>
scala> def foo[A](implicit x: Ordered[A]) {}
foo: [A](implicit x: Ordered[A])Unit

scala> def foo[A : Ordered] {}                        
foo: [A](implicit evidence$1: Ordered[A])Unit
</pre>

Implicit values may be accessed via *implicitly*
隐值可能会通过*implicitly* 被访问

<pre>
scala> implicitly[Ordering[Int]]
res37: Ordering[Int] = scala.math.Ordering$Int$@3a9291cf
</pre>

Combined, these often result in less code, especially when threading through views.
相结合后往往会使用更少的代码，尤其是当线程通过是同TODO。

H2（更高）。

h2(#higher). Higher-kinded types & ad-hoc polymorphism 高阶类型 和 点对点多态性

Scala can abstract over "higher kinded" types. For example, suppose that you needed to use several types of containers for several types of data. You might define a <code>Container</code> interface that might be implemented by means of several container types: an <code>Option</code>, a <code>List</code>, etc. You want to define an interface for using values in these containers without nailing down the values' type.
Scala可以对超过“更高阶”的类型抽象。例如，假设您需要对几种类型的数据使用几种类型的容器。你可能定义了一个<code>Container</code>的接口可以被实现为几种类型的容器：一个<code>Option</code>, 一个<code>List</code>，等。你要定义可以使用这些容器里的值的接口，但不想确定值的类型。

这类似与函数柯里化。例如，尽管“一元类型”有类似<code>List[A]</code>的构造函数，这意味着我们必须满足一个“级别”的类型变量来产生一个具体的类型（就像一个没有柯里化的函数需要只由一个被调用的参数列表提供），更高阶的类型需要更多。TODO

This is analogous to function currying. For example, whereas "unary types" have constructors like <code>List[A]</code>, meaning we have to satisfy one "level" of type variables in order to produce a concrete types (just like an uncurried function needs to be supplied by only one argument list to be invoked), a higher-kinded type needs more.


<pre>
scala> trait Container[M[_]] { def put[A](x: A): M[A]; def get[A](m: M[A]): A }

scala> val container = new Container[List] { def put[A](x: A) = List(x); def get[A](m: List[A]) = m.head }
container: java.lang.Object with Container[List] = $anon$1@7c8e3f75

scala> container.put("hey")
res24: List[java.lang.String] = List(hey)

scala> container.put(123)
res25: List[Int] = List(123)
</pre>

Note that *Container* is polymorphic in a parameterized type ("container type").
注意：*Container*是参数化类型的多态（“容器类型”）。

如果我们结合隐式转换implicits使用容器，我们会得到“特设的”多态性：对容器写泛型函数的能力。
If we combine using containers with implicits, we get "ad-hoc" polymorphism: the ability to write generic functions over containers.

<pre>
scala> trait Container[M[_]] { def put[A](x: A): M[A]; def get[A](m: M[A]): A }

scala> implicit val listContainer = new Container[List] { def put[A](x: A) = List(x); def get[A](m: List[A]) = m.head }

scala> implicit val optionContainer = new Container[Some] { def put[A](x: A) = Some(x); def get[A](m: Some[A]) = m.get }

scala> def tupleize[M[_]: Container, A, B](fst: M[A], snd: M[B]) = {
     | val c = implicitly[Container[M]]                             
     | c.put(c.get(fst), c.get(snd))
     | }
tupleize: [M[_],A,B](fst: M[A],snd: M[B])(implicit evidence$1: Container[M])M[(A, B)]

scala> tupleize(Some(1), Some(2))
res33: Some[(Int, Int)] = Some((1,2))

scala> tupleize(List(1), List(2))
res34: List[(Int, Int)] = List((1,2))
</pre>

h2(#fbounded). F-bounded polymorphism
F-界多态性

通常有要访问一个（泛型）特质的具体子类。例如，想象一下，你有一些泛型特质，但可以与它的某一子类进行比较。
Often it's necessary to access a concrete subclass in a (generic) trait. For example, imagine you had some trait that is generic, but can be compared to a particular subclass of that trait.

<pre>
trait Container extends Ordered[Container]
</pre>

However, this now necessitates the compare method
然而，现在必须比较方法

<pre>
def compare(that: Container): Int
</pre>

And so we cannot access the concrete subtype, e.g.:
因此，我们不能访问具体子类型，例如：

<pre>
class MyContainer extends Container {
  def compare(that: MyContainer): Int
}
</pre>

fails to compile, since we are specifying Ordered for *Container*, not the particular subtype.
编译失败，因为我们对容器指定了Ordered特质，而不是对特定子类型指定的。

为了调和这一点，我们改用F-界的多态性。
To reconcile this, we instead use F-bounded polymorphism.

<pre>
trait Container[A <: Container[A]] extends Ordered[A]
</pre>

Strange type!  But note now how Ordered is parameterized on *A*, which itself is *Container[A]*
奇怪的类型！但可以看到怎样对*A*实现了Ordered参数化，这本身就是*Container[A]*

所以，现在
So, now 

<pre>
class MyContainer extends Container[MyContainer] { 
  def compare(that: MyContainer) = 0 
}
</pre>

They are now ordered:
他们是有序的了：

<pre>
scala> List(new MyContainer, new MyContainer, new MyContainer)
res3: List[MyContainer] = List(MyContainer@30f02a6d, MyContainer@67717334, MyContainer@49428ffa)

scala> List(new MyContainer, new MyContainer, new MyContainer).min
res4: MyContainer = MyContainer@33dfeb30
</pre>

Given that they are all subtypes of *Container[_]*, we can define another subclass & create a mixed list of *Container[_]*:
鉴于他们都是 *Container[_]*的子类型，我们可以定义另一个子类并创建 *Container[_]*的一个混合列表：

<pre>
scala> class YourContainer extends Container[YourContainer] { def compare(that: YourContainer) = 0 }
defined class YourContainer

scala> List(new MyContainer, new MyContainer, new MyContainer, new YourContainer)                   
res2: List[Container[_ >: YourContainer with MyContainer <: Container[_ >: YourContainer with MyContainer <: ScalaObject]]] 
  = List(MyContainer@3be5d207, MyContainer@6d3fe849, MyContainer@7eab48a7, YourContainer@1f2f0ce9)
</pre>

Note how the resulting type is now lower-bound by *YourContainer with MyContainer*. This is the work of the type inferencer. Interestingly- this type doesn't even need to make sense, it only provides a logical greatest lower bound for the unified type of the list. What happens if we try to use *Ordered* now?
注意结果类型是 *YourContainer 和 MyContainer* 类型确定的下界。这是类型对图案的工作。有趣的是，这种类型甚至不需要是有道理的，它只是提供了一个合乎逻辑的最大下界为列表的统一类型。如果现在我们尝试使用*Ordered*会发生什么？

<pre>
(new MyContainer, new MyContainer, new MyContainer, new YourContainer).min
<console>:9: error: could not find implicit value for parameter cmp:
  Ordering[Container[_ >: YourContainer with MyContainer <: Container[_ >: YourContainer with MyContainer <: ScalaObject]]]
</pre>

No *Ordered[]* exists for the unified type. Too bad.
对统一的类型 *Ordered[]*不存在了。太糟糕了。

h2(#structural). Structural types 结构类型

Scala has support for *structural types* -- type requirements are expressed by interface _structure_ instead of a concrete type.
Scala 支持 *结构类型structural types* -- 类型需求由接口 _结构 structure_表示，而不是由具体的类型表示。

<pre>
scala> def foo(x: { def get: Int }) = 123 + x.get
foo: (x: AnyRef{def get: Int})Int

scala> foo(new { def get = 10 })                 
res0: Int = 133
</pre>

This can be quite nice in many situations, but the implementation uses reflection, so be performance-aware!
在许多情况下，这可能是相当不错的，但这个实现中使用了反射，所以要注意性能！

h2(#abstractmem). Abstract type members 抽象类型成员

In a trait, you can leave type members abstract.
在特质中，你可以让类型成员保持抽象。

<pre>
scala> trait Foo { type A; val x: A; def getX: A = x }
defined trait Foo

scala> (new Foo { type A = Int; val x = 123 }).getX   
res3: Int = 123

scala> (new Foo { type A = String; val x = "hey" }).getX
res4: java.lang.String = hey
</pre>

This is often a useful trick when doing dependency injection, etc.
在做依赖注入等情况下，这往往是一个有用的技巧

您可以对一个抽象类型的变量使用散列操作符：
You can refer to an abstract type variable using the hash-operator:

<pre>
scala> trait Foo[M[_]] { type t[A] = M[A] }
defined trait Foo

scala> val x: Foo[List]#t[Int] = List(1)
x: List[Int] = List(1)
</pre>


h2(#manifest). Type erasures & manifests
类型擦除和清单

正如我们所知道的，类型信息在编译的时候会因为 _擦除erasure_而丢失。 Scala的 *清单Manifests*功能，使我们能够选择性地恢复类型信息。清单提供了一个隐含的价值，根据需要由编译器生成。
As we know, type information is lost at compile time due to _erasure_. Scala features *Manifests*, allowing us to selectively recover type information. Manifests are provided as an implicit value, generated by the compiler as needed.

<pre>
scala> class MakeFoo[A](implicit manifest: Manifest[A]) { def make: A = manifest.erasure.newInstance.asInstanceOf[A] }

scala> (new MakeFoo[String]).make
res10: String = ""
</pre>

h2(#finagle). Case study: Finagle

See: https://github.com/twitter/finagle

<pre>
trait Service[-Req, +Rep] extends (Req => Future[Rep])

trait Filter[-ReqIn, +RepOut, +ReqOut, -RepIn]
  extends ((ReqIn, Service[ReqOut, RepIn]) => Future[RepOut])
{
  def andThen[Req2, Rep2](next: Filter[ReqOut, RepIn, Req2, Rep2]) =
    new Filter[ReqIn, RepOut, Req2, Rep2] {
      def apply(request: ReqIn, service: Service[Req2, Rep2]) = {
        Filter.this.apply(request, new Service[ReqOut, RepIn] {
          def apply(request: ReqOut): Future[RepIn] = next(request, service)
          override def release() = service.release()
          override def isAvailable = service.isAvailable
        })
      }
    }
    
  def andThen(service: Service[ReqOut, RepIn]) = new Service[ReqIn, RepOut] {
    private[this] val refcounted = new RefcountedService(service)

    def apply(request: ReqIn) = Filter.this.apply(request, refcounted)
    override def release() = refcounted.release()
    override def isAvailable = refcounted.isAvailable
  }    
}
</pre>

A service may authenticate requests with a filter.
服务可能通过过滤器对请求进行身份验证。
<pre>
trait RequestWithCredentials extends Request {
  def credentials: Credentials
}

class CredentialsFilter(credentialsParser: CredentialsParser)
  extends Filter[Request, Response, RequestWithCredentials, Response]
{
  def apply(request: Request, service: Service[RequestWithCredentials, Response]): Future[Response] = {
    val requestWithCredentials = new RequestWrapper with RequestWithCredentials {
      val underlying = request
      val credentials = credentialsParser(request) getOrElse NullCredentials
    }

    service(requestWithCredentials)
  }
}
</pre>

Note how the underlying service requires an authenticated request, and that this is statically verified. Filters can thus be thought of as service transformers.
注意底层服务是如何需要队请求进行身份验证的，而且还是静态验证。因此，过滤器可以被看作是服务转换器。

许多过滤器可以被组合在一起：
Many filters can be composed together:

<pre>
val upFilter =
  logTransaction     andThen
  handleExceptions   andThen
  extractCredentials andThen
  homeUser           andThen
  authenticate       andThen
  route
</pre>

键入安全！
Type safely!
